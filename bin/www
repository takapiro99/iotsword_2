#!/usr/bin/env node
const lednum = 28
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('iotsword2:server');
var http = require('http');

var mqtt = require('mqtt');
var client  = mqtt.connect('mqtt://localhost');


/** 
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

//module.exports = server;
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var io = require('socket.io')(server);
//module.exports = io;
/**
 * ADDED!! Socket.IO Connection.
 */

function hex2rgb ( hex ) {
	if ( hex.slice(0, 1) == "#" ) hex = hex.slice(1) ;
	if ( hex.length == 3 ) hex = hex.slice(0,1) + hex.slice(0,1) + hex.slice(1,2) + hex.slice(1,2) + hex.slice(2,3) + hex.slice(2,3) ;
	return [ hex.slice( 0, 2 ), hex.slice( 2, 4 ), hex.slice( 4, 6 ) ].map( function ( str ) {
		return parseInt( str, 16 ) ;
	} ) ;
}

function componentToHex(c) {
  var hex = c.toString(16);
  return hex.length == 1 ? "0" + hex : hex;
}

function rgb2hex(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

/*
function rgb2hex ( rgb ) {
	return "#" + rgb.map( function ( value ) {
		return ( "0" + value.toString( 16 ) ).slice( -2 ) ;
	} ).join( "" ) ;
}
//rgb2hex( [ 255, 128, 64 ] ) ;	// #ff8040
*/
//dim[0]("#ee0012");
//ってやったら自動で0番のdimが始まる。他のやつが来たり0になったらbreakしなければならない。

function emitting(i,color){
  io.sockets.emit(i,color);
  //socket.broadcast.emit(i,color);
}

function dim(i,color,delay){
  let rgb = [];
  let piece = hex2rgb(color);
  rgb[0] = piece[0];
  rgb[1] = piece[1];
  rgb[2] = piece[2];
  rgb[3] = i;
  emitting(rgb[3],rgb2hex(rgb[0],rgb[1],rgb[2]));
}

info = []
for(let i=0;i<lednum;i++){
  info[i]="#000000";
}
/*-----------------------------
            main 
 
 -----------------------------*/
// when socket.io starts, below
io.on("connection",(socket)=>{
  console.log("made socket connection",socket.id);
  // on "chat", emits data and console log it.
  socket.on("chat",(data)=>{
      io.sockets.emit("chat",data);
      console.log(data);
  });
  // for each cells listens to "<int>" and braodcast the data.
  for(let i=0;i<lednum;i++){
    socket.on(String(i),(color)=>{ // 情報が来たら
      console.log(i, color); 
      info[i]=color;
      dim(i,color,500);
      let clr;
      switch(color) {
          case '#ededed':console.log('white');clr = "255255255";break;
          case '#f06292':console.log('pink');clr = "255050255";break;
          case '#ef5350':console.log('red');clr = "255010010";break;
          case '#ffa726':console.log('orange');clr = "255090020";break;
          case '#ffeb3b':console.log('yellow');clr = "255255000";break;
          case '#dce775':console.log('lightgreen');clr = "150255010";break;
          case '#66bb6a':console.log('green');clr = "010255010";break;
          case '#80d6ff':console.log('lightblue');clr = "050200255";break;
          case '#2196f3':console.log('blue');clr = "000000255";break;
          case '#ab47bc':console.log('purple');clr = "020000040";break;
          case '#000000':console.log('black');clr = "000000000";break;
          default:clr="000000000"
      }
      //let one = String(hex2rgb(color)[0])
      //let two = String(hex2rgb(color)[1])
      //let ree = String(hex2rgb(color)[2])
      //if(one.length==1){one='00'+one;}if(one.length==2){one='0'+one;}
      //if(two.length==1){two='00'+two;}if(two.length==2){two='0'+two;}
      //if(ree.length==1){ree='00'+ree;}if(ree.length==2){ree='0'+ree;}
      //let clr = one+two+ree
      //let num;
      if(String(i).length==1){num="0"+String(i)}else{num=String(i)}
      client.publish("color/"+num,clr);//console.log(i,clr);
    })
  }
  //socket.on("typing",function(data){
  //    socket.broadcast.emit("typing",data)
  //})
}); 

client.on('connect', function () {
  client.subscribe('presence',(err)=>{if (!err) {client.publish('presence', 'Hello mqtt')}});
  client.subscribe("message",(err)=>{if(!err){console.log("message");}else{console.log("err");}});
  client.subscribe("color/#",(err)=>{if(!err){console.log("color");}else{console.log("err");}});
});

(function(){
  console.log("func");
  client.publish("message","publishing!!!!!!");
}());


client.on('message', function (topic, message) {
  //client.subscribe(topic,()=>{console.log("this func")})
  msg = message.toString();
  console.log(msg);
  //client.end();
})